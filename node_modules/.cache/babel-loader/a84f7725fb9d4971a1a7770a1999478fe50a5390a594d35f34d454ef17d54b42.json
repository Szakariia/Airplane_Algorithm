{"ast":null,"code":"function checkArrayNumbers(arrStr) {\n  // Regular expression to match numbers between 0 and 50\n  const numberRegex = /^(50|[1-4]\\d|0)$/;\n\n  // Split the string into rows\n  const rows = arrStr.split(/\\],\\s*\\[/);\n\n  // Check if the number of rows is between 0 and 5\n  if (!/^(5|[1-4]|[1-4]\\d|0)$/.test(rows.length)) {\n    return false;\n  }\n\n  // Iterate through each row\n  for (let i = 0; i < rows.length; i++) {\n    // Split the row into columns\n    const cols = rows[i].split(/,\\s*/);\n\n    // Iterate through each column\n    for (let j = 0; j < cols.length; j++) {\n      // Check if the column value is between 0 and 50\n      if (!numberRegex.test(cols[j])) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nconst RegexExp = value => {\n  var RegexExp = /^(\\[\\[\\d+,\\s?\\d+\\](,\\s?\\[\\d+,\\s?\\d+\\])*\\]|\\[\\d+,\\s?\\d+\\](,\\s?\\[\\d+,\\s?\\d+\\])*)$/;\n  const Seats = value.split(\"],[\");\n  if (!RegexExp.test(value)) return \"2D array Syntax error\";else if (Seats.length > 4) return \"Max Seats 4\";\n  return checkArrayNumbers(value);\n};\n_c = RegexExp;\nconst isNumber = value => {\n  if (isNaN(value)) return \"Require number\";else if (Number(value) > 50 || Number(value) < 0) return \"Value must be between 0 - 50\";\n  return \"\";\n};\nfunction Inputvalidator(value, name) {\n  if (name === \"Seats\") return RegexExp(value);\n  if (name === \"Passengers\") return isNumber(value);\n}\n_c2 = Inputvalidator;\nexport default Inputvalidator;\nvar _c, _c2;\n$RefreshReg$(_c, \"RegexExp\");\n$RefreshReg$(_c2, \"Inputvalidator\");","map":{"version":3,"names":["checkArrayNumbers","arrStr","numberRegex","rows","split","test","length","i","cols","j","RegexExp","value","Seats","isNumber","isNaN","Number","Inputvalidator","name"],"sources":["/Users/selbizakaria/Desktop/airplan-algo/src/Utils/inputValidator.js"],"sourcesContent":["function checkArrayNumbers(arrStr) {\n    // Regular expression to match numbers between 0 and 50\n    const numberRegex = /^(50|[1-4]\\d|0)$/;\n\n    // Split the string into rows\n    const rows = arrStr.split(/\\],\\s*\\[/);\n\n    // Check if the number of rows is between 0 and 5\n    if (!/^(5|[1-4]|[1-4]\\d|0)$/.test(rows.length)) {\n        return false;\n    }\n\n    // Iterate through each row\n    for (let i = 0; i < rows.length; i++) {\n        // Split the row into columns\n        const cols = rows[i].split(/,\\s*/);\n\n        // Iterate through each column\n        for (let j = 0; j < cols.length; j++) {\n            // Check if the column value is between 0 and 50\n            if (!numberRegex.test(cols[j])) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n\nconst RegexExp = (value) => {\n    \n    var RegexExp = /^(\\[\\[\\d+,\\s?\\d+\\](,\\s?\\[\\d+,\\s?\\d+\\])*\\]|\\[\\d+,\\s?\\d+\\](,\\s?\\[\\d+,\\s?\\d+\\])*)$/;\n    const Seats = value.split(\"],[\")\n\n    if (!RegexExp.test(value)) return (\"2D array Syntax error\")\n    else if (Seats.length > 4) return (\"Max Seats 4\")\n    return (checkArrayNumbers(value))\n}\n\nconst isNumber = (value) => {\n    if (isNaN(value)) return (\"Require number\")\n    else if (Number(value) > 50 || Number(value) < 0) return (\"Value must be between 0 - 50\")\n    return (\"\")\n}\n\nfunction Inputvalidator(value, name) {\n    if (name === \"Seats\") return (RegexExp(value))\n    if (name === \"Passengers\") return (isNumber(value))\n}\n\nexport default Inputvalidator;"],"mappings":"AAAA,SAASA,iBAAiB,CAACC,MAAM,EAAE;EAC/B;EACA,MAAMC,WAAW,GAAG,kBAAkB;;EAEtC;EACA,MAAMC,IAAI,GAAGF,MAAM,CAACG,KAAK,CAAC,UAAU,CAAC;;EAErC;EACA,IAAI,CAAC,uBAAuB,CAACC,IAAI,CAACF,IAAI,CAACG,MAAM,CAAC,EAAE;IAC5C,OAAO,KAAK;EAChB;;EAEA;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACG,MAAM,EAAEC,CAAC,EAAE,EAAE;IAClC;IACA,MAAMC,IAAI,GAAGL,IAAI,CAACI,CAAC,CAAC,CAACH,KAAK,CAAC,MAAM,CAAC;;IAElC;IACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,IAAI,CAACF,MAAM,EAAEG,CAAC,EAAE,EAAE;MAClC;MACA,IAAI,CAACP,WAAW,CAACG,IAAI,CAACG,IAAI,CAACC,CAAC,CAAC,CAAC,EAAE;QAC5B,OAAO,KAAK;MAChB;IACJ;EACJ;EAEA,OAAO,IAAI;AACf;AAGA,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAExB,IAAID,QAAQ,GAAG,iFAAiF;EAChG,MAAME,KAAK,GAAGD,KAAK,CAACP,KAAK,CAAC,KAAK,CAAC;EAEhC,IAAI,CAACM,QAAQ,CAACL,IAAI,CAACM,KAAK,CAAC,EAAE,OAAQ,uBAAuB,CAAC,KACtD,IAAIC,KAAK,CAACN,MAAM,GAAG,CAAC,EAAE,OAAQ,aAAa;EAChD,OAAQN,iBAAiB,CAACW,KAAK,CAAC;AACpC,CAAC;AAAA,KARKD,QAAQ;AAUd,MAAMG,QAAQ,GAAIF,KAAK,IAAK;EACxB,IAAIG,KAAK,CAACH,KAAK,CAAC,EAAE,OAAQ,gBAAgB,CAAC,KACtC,IAAII,MAAM,CAACJ,KAAK,CAAC,GAAG,EAAE,IAAII,MAAM,CAACJ,KAAK,CAAC,GAAG,CAAC,EAAE,OAAQ,8BAA8B;EACxF,OAAQ,EAAE;AACd,CAAC;AAED,SAASK,cAAc,CAACL,KAAK,EAAEM,IAAI,EAAE;EACjC,IAAIA,IAAI,KAAK,OAAO,EAAE,OAAQP,QAAQ,CAACC,KAAK,CAAC;EAC7C,IAAIM,IAAI,KAAK,YAAY,EAAE,OAAQJ,QAAQ,CAACF,KAAK,CAAC;AACtD;AAAC,MAHQK,cAAc;AAKvB,eAAeA,cAAc;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}