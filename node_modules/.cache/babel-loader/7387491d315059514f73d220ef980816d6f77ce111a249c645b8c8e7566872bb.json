{"ast":null,"code":"function checkArrayNumbers(input) {\n  let regex = /\\d+/g;\n  let result = input.match(regex);\n  console.log(\" >>>>>>>> \", result, \" <<<<<<< \");\n  return \"\";\n}\nconst RegexExp = value => {\n  var RegexExp = /^(\\[\\[\\d+,\\s?\\d+\\](,\\s?\\[\\d+,\\s?\\d+\\])*\\]|\\[\\d+,\\s?\\d+\\](,\\s?\\[\\d+,\\s?\\d+\\])*)$/;\n  const Seats = value.split(\"],[\");\n  if (!RegexExp.test(value)) return \"2D array Syntax error\";else if (Seats.length > 4) return \"Max Seats 4\";\n  console.log(\" ======> Error checker \", checkArrayNumbers(value));\n  return checkArrayNumbers(value);\n};\n_c = RegexExp;\nconst isNumber = value => {\n  if (isNaN(value)) return \"Require number\";else if (Number(value) > 50 || Number(value) < 0) return \"Value must be between 0 - 50\";\n  return \"\";\n};\nfunction Inputvalidator(value, name) {\n  if (name === \"Seats\") return RegexExp(value);\n  if (name === \"Passengers\") return isNumber(value);\n}\n_c2 = Inputvalidator;\nexport default Inputvalidator;\nvar _c, _c2;\n$RefreshReg$(_c, \"RegexExp\");\n$RefreshReg$(_c2, \"Inputvalidator\");","map":{"version":3,"names":["checkArrayNumbers","input","regex","result","match","console","log","RegexExp","value","Seats","split","test","length","isNumber","isNaN","Number","Inputvalidator","name"],"sources":["/Users/selbizakaria/Desktop/airplan-algo/src/Utils/inputValidator.js"],"sourcesContent":["function checkArrayNumbers(input) {\n    let regex = /\\d+/g;\n    let result = input.match(regex);\n    console.log(\" >>>>>>>> \", result, \" <<<<<<< \")\n    \n    return \"\"\n}\n\nconst RegexExp = (value) => {\n    \n    var RegexExp = /^(\\[\\[\\d+,\\s?\\d+\\](,\\s?\\[\\d+,\\s?\\d+\\])*\\]|\\[\\d+,\\s?\\d+\\](,\\s?\\[\\d+,\\s?\\d+\\])*)$/;\n    const Seats = value.split(\"],[\")\n\n    if (!RegexExp.test(value)) return (\"2D array Syntax error\")\n    else if (Seats.length > 4) return (\"Max Seats 4\")\n\n    console.log(\" ======> Error checker \", checkArrayNumbers(value))\n    return (checkArrayNumbers(value))\n}\n\nconst isNumber = (value) => {\n    if (isNaN(value)) return (\"Require number\")\n    else if (Number(value) > 50 || Number(value) < 0) return (\"Value must be between 0 - 50\")\n    return (\"\")\n}\n\nfunction Inputvalidator(value, name) {\n    if (name === \"Seats\") return (RegexExp(value))\n    if (name === \"Passengers\") return (isNumber(value))\n}\n\nexport default Inputvalidator;"],"mappings":"AAAA,SAASA,iBAAiB,CAACC,KAAK,EAAE;EAC9B,IAAIC,KAAK,GAAG,MAAM;EAClB,IAAIC,MAAM,GAAGF,KAAK,CAACG,KAAK,CAACF,KAAK,CAAC;EAC/BG,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,MAAM,EAAE,WAAW,CAAC;EAE9C,OAAO,EAAE;AACb;AAEA,MAAMI,QAAQ,GAAIC,KAAK,IAAK;EAExB,IAAID,QAAQ,GAAG,iFAAiF;EAChG,MAAME,KAAK,GAAGD,KAAK,CAACE,KAAK,CAAC,KAAK,CAAC;EAEhC,IAAI,CAACH,QAAQ,CAACI,IAAI,CAACH,KAAK,CAAC,EAAE,OAAQ,uBAAuB,CAAC,KACtD,IAAIC,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE,OAAQ,aAAa;EAEhDP,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEN,iBAAiB,CAACQ,KAAK,CAAC,CAAC;EAChE,OAAQR,iBAAiB,CAACQ,KAAK,CAAC;AACpC,CAAC;AAAA,KAVKD,QAAQ;AAYd,MAAMM,QAAQ,GAAIL,KAAK,IAAK;EACxB,IAAIM,KAAK,CAACN,KAAK,CAAC,EAAE,OAAQ,gBAAgB,CAAC,KACtC,IAAIO,MAAM,CAACP,KAAK,CAAC,GAAG,EAAE,IAAIO,MAAM,CAACP,KAAK,CAAC,GAAG,CAAC,EAAE,OAAQ,8BAA8B;EACxF,OAAQ,EAAE;AACd,CAAC;AAED,SAASQ,cAAc,CAACR,KAAK,EAAES,IAAI,EAAE;EACjC,IAAIA,IAAI,KAAK,OAAO,EAAE,OAAQV,QAAQ,CAACC,KAAK,CAAC;EAC7C,IAAIS,IAAI,KAAK,YAAY,EAAE,OAAQJ,QAAQ,CAACL,KAAK,CAAC;AACtD;AAAC,MAHQQ,cAAc;AAKvB,eAAeA,cAAc;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}