{"ast":null,"code":"// [row, col] [x, y] [2,3]\n\nfunction getNextRow(arr, i) {\n  for (i < arr.length; i++;) {\n    if (i % 2) return arr[i];\n  } // row\n  return \"\";\n}\nfunction getNextCol(arr, i) {\n  for (i < arr.length; i++;) {\n    if (!(i % 2)) return arr[i];\n  } // col\n  return \"\";\n}\nfunction beZeroArr(arr, zeros) {\n  for (let i = 0; i < zeros; i++) arr[i] = 0;\n  return arr;\n}\nfunction beZeroArr2D(arr, x, y) {\n  for (let i = 0; i < x; i++) arr[i] = beZeroArr(arr[i], y);\n  return arr;\n}\nfunction beZeroArr3D(Seats) {\n  let regex = /\\d+/g; // get only numbers\n  let seatsArr = Seats.match(regex);\n  let arr = [[[]]]; // 3D arr\n  console.log();\n  for (let i = 0; i < seatsArr.length / 2; i++) {\n    // (Seats / 2) : (int) means how much seats we have \n    let x = getNextRow(seatsArr, i);\n    // arr[i] = beZeroArr2D(arr[i], x, y)\n  }\n\n  return arr;\n}\nfunction CreateMap(FormValues) {\n  console.log(\"DATA CREATE MAP:\", FormValues);\n  beZeroArr3D(FormValues.Seats);\n  return \"\";\n}\n_c = CreateMap;\nexport default CreateMap;\nvar _c;\n$RefreshReg$(_c, \"CreateMap\");","map":{"version":3,"names":["getNextRow","arr","i","length","getNextCol","beZeroArr","zeros","beZeroArr2D","x","y","beZeroArr3D","Seats","regex","seatsArr","match","console","log","CreateMap","FormValues"],"sources":["/Users/selbizakaria/Desktop/airplan-algo/src/Utils/parser.js"],"sourcesContent":["\n// [row, col] [x, y] [2,3]\n\nfunction getNextRow(arr, i)\n{\n    for (i < arr.length; i++;){ \n        if ((i % 2))  return arr[i]} // row\n    return \"\"\n}\n\nfunction getNextCol(arr, i)\n{\n    for (i < arr.length; i++;){ \n        if (!(i % 2)) return arr[i]} // col\n    return \"\"\n}\n\nfunction beZeroArr(arr, zeros)   \n{\n    for (let i = 0; i < zeros; i++)   \n        arr[i] = 0\n    return arr;\n}\n\nfunction beZeroArr2D(arr, x, y)   \n{\n    for (let i = 0; i < x; i++)   \n            arr[i] = beZeroArr(arr[i], y)\n    return arr;\n}\n\nfunction beZeroArr3D(Seats) {\n    let regex = /\\d+/g; // get only numbers\n    let seatsArr = Seats.match(regex); \n    let arr = [[[]]] // 3D arr\n    console.log()\n    for (let i = 0; i < (seatsArr.length / 2); i++){   // (Seats / 2) : (int) means how much seats we have \n        let x = getNextRow(seatsArr, i)\n        // arr[i] = beZeroArr2D(arr[i], x, y)\n    }\n    \nreturn arr;\n}\n\n\nfunction CreateMap(FormValues) {\n    console.log(\"DATA CREATE MAP:\", FormValues)\n    beZeroArr3D(FormValues.Seats)\n    return \"\"\n}\n\nexport default CreateMap"],"mappings":"AACA;;AAEA,SAASA,UAAU,CAACC,GAAG,EAAEC,CAAC,EAC1B;EACI,KAAKA,CAAC,GAAGD,GAAG,CAACE,MAAM,EAAED,CAAC,EAAE,GAAE;IACtB,IAAKA,CAAC,GAAG,CAAC,EAAI,OAAOD,GAAG,CAACC,CAAC,CAAC;EAAA,CAAC,CAAC;EACjC,OAAO,EAAE;AACb;AAEA,SAASE,UAAU,CAACH,GAAG,EAAEC,CAAC,EAC1B;EACI,KAAKA,CAAC,GAAGD,GAAG,CAACE,MAAM,EAAED,CAAC,EAAE,GAAE;IACtB,IAAI,EAAEA,CAAC,GAAG,CAAC,CAAC,EAAE,OAAOD,GAAG,CAACC,CAAC,CAAC;EAAA,CAAC,CAAC;EACjC,OAAO,EAAE;AACb;AAEA,SAASG,SAAS,CAACJ,GAAG,EAAEK,KAAK,EAC7B;EACI,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,KAAK,EAAEJ,CAAC,EAAE,EAC1BD,GAAG,CAACC,CAAC,CAAC,GAAG,CAAC;EACd,OAAOD,GAAG;AACd;AAEA,SAASM,WAAW,CAACN,GAAG,EAAEO,CAAC,EAAEC,CAAC,EAC9B;EACI,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,CAAC,EAAEN,CAAC,EAAE,EAClBD,GAAG,CAACC,CAAC,CAAC,GAAGG,SAAS,CAACJ,GAAG,CAACC,CAAC,CAAC,EAAEO,CAAC,CAAC;EACrC,OAAOR,GAAG;AACd;AAEA,SAASS,WAAW,CAACC,KAAK,EAAE;EACxB,IAAIC,KAAK,GAAG,MAAM,CAAC,CAAC;EACpB,IAAIC,QAAQ,GAAGF,KAAK,CAACG,KAAK,CAACF,KAAK,CAAC;EACjC,IAAIX,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC;EACjBc,OAAO,CAACC,GAAG,EAAE;EACb,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAIW,QAAQ,CAACV,MAAM,GAAG,CAAE,EAAED,CAAC,EAAE,EAAC;IAAI;IAC/C,IAAIM,CAAC,GAAGR,UAAU,CAACa,QAAQ,EAAEX,CAAC,CAAC;IAC/B;EACJ;;EAEJ,OAAOD,GAAG;AACV;AAGA,SAASgB,SAAS,CAACC,UAAU,EAAE;EAC3BH,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEE,UAAU,CAAC;EAC3CR,WAAW,CAACQ,UAAU,CAACP,KAAK,CAAC;EAC7B,OAAO,EAAE;AACb;AAAC,KAJQM,SAAS;AAMlB,eAAeA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}