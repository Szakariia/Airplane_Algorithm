{"ast":null,"code":"function checkArrayNumbers(input) {\n  var coordinates = input.split(\",\");\n  var rows = coordinates[0].split(\"[\")[1];\n  var cols = coordinates[1].split(\"]\")[0];\n  if (rows >= 0 && rows <= 5 && cols >= 0 && cols <= 50) return \"\";\n  return \"Coordinates of [row, col] are not valid\";\n}\nconst RegexExp = value => {\n  var RegexExp = /^(\\[\\[\\d+,\\s?\\d+\\](,\\s?\\[\\d+,\\s?\\d+\\])*\\]|\\[\\d+,\\s?\\d+\\](,\\s?\\[\\d+,\\s?\\d+\\])*)$/;\n  const Seats = value.split(\"],[\");\n  if (!RegexExp.test(value)) return \"2D array Syntax error\";else if (Seats.length > 4) return \"Max Seats 4\";\n  console.log(\" ======> Error checker \", checkArrayNumbers(value));\n  return checkArrayNumbers(value);\n};\n_c = RegexExp;\nconst isNumber = value => {\n  if (isNaN(value)) return \"Require number\";else if (Number(value) > 50 || Number(value) < 0) return \"Value must be between 0 - 50\";\n  return \"\";\n};\nfunction Inputvalidator(value, name) {\n  if (name === \"Seats\") return RegexExp(value);\n  if (name === \"Passengers\") return isNumber(value);\n}\n_c2 = Inputvalidator;\nexport default Inputvalidator;\nvar _c, _c2;\n$RefreshReg$(_c, \"RegexExp\");\n$RefreshReg$(_c2, \"Inputvalidator\");","map":{"version":3,"names":["checkArrayNumbers","input","coordinates","split","rows","cols","RegexExp","value","Seats","test","length","console","log","isNumber","isNaN","Number","Inputvalidator","name"],"sources":["/Users/selbizakaria/Desktop/airplan-algo/src/Utils/inputValidator.js"],"sourcesContent":["function checkArrayNumbers(input) {\n    var coordinates = input.split(\",\");\n    var rows = coordinates[0].split(\"[\")[1];\n    var cols = coordinates[1].split(\"]\")[0];\n\n    if (rows >= 0 && rows <= 5 && cols >= 0 && cols <= 50) return \"\"\n    \n    return \"Coordinates of [row, col] are not valid\"\n}\n\n\nconst RegexExp = (value) => {\n    \n    var RegexExp = /^(\\[\\[\\d+,\\s?\\d+\\](,\\s?\\[\\d+,\\s?\\d+\\])*\\]|\\[\\d+,\\s?\\d+\\](,\\s?\\[\\d+,\\s?\\d+\\])*)$/;\n    const Seats = value.split(\"],[\")\n\n    if (!RegexExp.test(value)) return (\"2D array Syntax error\")\n    else if (Seats.length > 4) return (\"Max Seats 4\")\n\n    console.log(\" ======> Error checker \", checkArrayNumbers(value))\n    return (checkArrayNumbers(value))\n}\n\nconst isNumber = (value) => {\n    if (isNaN(value)) return (\"Require number\")\n    else if (Number(value) > 50 || Number(value) < 0) return (\"Value must be between 0 - 50\")\n    return (\"\")\n}\n\nfunction Inputvalidator(value, name) {\n    if (name === \"Seats\") return (RegexExp(value))\n    if (name === \"Passengers\") return (isNumber(value))\n}\n\nexport default Inputvalidator;"],"mappings":"AAAA,SAASA,iBAAiB,CAACC,KAAK,EAAE;EAC9B,IAAIC,WAAW,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;EAClC,IAAIC,IAAI,GAAGF,WAAW,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACvC,IAAIE,IAAI,GAAGH,WAAW,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEvC,IAAIC,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,CAAC,IAAIC,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,EAAE,EAAE,OAAO,EAAE;EAEhE,OAAO,yCAAyC;AACpD;AAGA,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAExB,IAAID,QAAQ,GAAG,iFAAiF;EAChG,MAAME,KAAK,GAAGD,KAAK,CAACJ,KAAK,CAAC,KAAK,CAAC;EAEhC,IAAI,CAACG,QAAQ,CAACG,IAAI,CAACF,KAAK,CAAC,EAAE,OAAQ,uBAAuB,CAAC,KACtD,IAAIC,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE,OAAQ,aAAa;EAEhDC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEZ,iBAAiB,CAACO,KAAK,CAAC,CAAC;EAChE,OAAQP,iBAAiB,CAACO,KAAK,CAAC;AACpC,CAAC;AAAA,KAVKD,QAAQ;AAYd,MAAMO,QAAQ,GAAIN,KAAK,IAAK;EACxB,IAAIO,KAAK,CAACP,KAAK,CAAC,EAAE,OAAQ,gBAAgB,CAAC,KACtC,IAAIQ,MAAM,CAACR,KAAK,CAAC,GAAG,EAAE,IAAIQ,MAAM,CAACR,KAAK,CAAC,GAAG,CAAC,EAAE,OAAQ,8BAA8B;EACxF,OAAQ,EAAE;AACd,CAAC;AAED,SAASS,cAAc,CAACT,KAAK,EAAEU,IAAI,EAAE;EACjC,IAAIA,IAAI,KAAK,OAAO,EAAE,OAAQX,QAAQ,CAACC,KAAK,CAAC;EAC7C,IAAIU,IAAI,KAAK,YAAY,EAAE,OAAQJ,QAAQ,CAACN,KAAK,CAAC;AACtD;AAAC,MAHQS,cAAc;AAKvB,eAAeA,cAAc;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}